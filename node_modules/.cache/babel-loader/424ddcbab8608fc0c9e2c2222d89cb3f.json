{"ast":null,"code":"import _assertThisInitialized from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _get from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _createClass from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _asyncToGenerator from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _objectSpread from \"/Users/cdmstudent/Documents/GitHub/DDC_Current/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n// src/hooks/useChain.ts\nimport { each, useIsomorphicLayoutEffect } from \"@react-spring/shared\";\n\n// src/helpers.ts\nimport { is, toArray, eachProp, getFluidValue, isAnimatedString, Globals as G } from \"@react-spring/shared\";\nfunction callProp(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return is.fun(value) ? value.apply(void 0, args) : value;\n}\nvar matchProp = function matchProp(value, key) {\n  return value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\n};\nvar resolveProp = function resolveProp(prop, key) {\n  return is.obj(prop) ? key && prop[key] : prop;\n};\nvar getDefaultProp = function getDefaultProp(props, key) {\n  return props.default === true ? props[key] : props.default ? props.default[key] : void 0;\n};\nvar noopTransform = function noopTransform(value) {\n  return value;\n};\nvar getDefaultProps = function getDefaultProps(props) {\n  var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noopTransform;\n  var keys = DEFAULT_PROPS;\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n  var defaults2 = {};\n  var _iterator = _createForOfIteratorHelper(keys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      var value = transform(props[key], key);\n      if (!is.und(value)) {\n        defaults2[key] = value;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return defaults2;\n};\nvar DEFAULT_PROPS = [\"config\", \"onProps\", \"onStart\", \"onChange\", \"onPause\", \"onResume\", \"onRest\"];\nvar RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  // Transition props\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  // Internal props\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\nfunction getForwardProps(props) {\n  var forward = {};\n  var count = 0;\n  eachProp(props, function (value, prop) {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n  if (count) {\n    return forward;\n  }\n}\nfunction inferTo(props) {\n  var to2 = getForwardProps(props);\n  if (to2) {\n    var out = {\n      to: to2\n    };\n    eachProp(props, function (val, key) {\n      return key in to2 || (out[key] = val);\n    });\n    return out;\n  }\n  return _objectSpread({}, props);\n}\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? G.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\nfunction hasProps(props) {\n  for (var _ in props) return true;\n  return false;\n}\nfunction isAsyncTo(to2) {\n  return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);\n}\nfunction detachRefs(ctrl, ref) {\n  ctrl.ref?.delete(ctrl);\n  ref?.delete(ctrl);\n}\nfunction replaceRef(ctrl, ref) {\n  if (ref && ctrl.ref !== ref) {\n    ctrl.ref?.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n}\n\n// src/hooks/useChain.ts\nfunction useChain(refs, timeSteps) {\n  var timeFrame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;\n  useIsomorphicLayoutEffect(function () {\n    if (timeSteps) {\n      var prevDelay = 0;\n      each(refs, function (ref, i) {\n        var controllers = ref.current;\n        if (controllers.length) {\n          var delay = timeFrame * timeSteps[i];\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          each(controllers, function (ctrl) {\n            each(ctrl.queue, function (props) {\n              var memoizedDelayProp = props.delay;\n              props.delay = function (key) {\n                return delay + callProp(memoizedDelayProp || 0, key);\n              };\n            });\n          });\n          ref.start();\n        }\n      });\n    } else {\n      var p = Promise.resolve();\n      each(refs, function (ref) {\n        var controllers = ref.current;\n        if (controllers.length) {\n          var queues = controllers.map(function (ctrl) {\n            var q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(function () {\n            each(controllers, function (ctrl, i) {\n              return each(queues[i] || [], function (update2) {\n                return ctrl.queue.push(update2);\n              });\n            });\n            return Promise.all(ref.start());\n          });\n        }\n      });\n    }\n  });\n}\n\n// src/hooks/useSpring.ts\nimport { is as is9 } from \"@react-spring/shared\";\n\n// src/hooks/useSprings.ts\nimport { useContext as useContext2, useMemo, useRef } from \"react\";\nimport { is as is8, each as each5, usePrev, useOnce, useForceUpdate, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect2 } from \"@react-spring/shared\";\n\n// src/SpringValue.ts\nimport { is as is5, raf as raf3, each as each2, isEqual, toArray as toArray2, eachProp as eachProp3, frameLoop as frameLoop2, flushCalls, getFluidValue as getFluidValue2, isAnimatedString as isAnimatedString2, Globals as G5, callFluidObservers as callFluidObservers2, hasFluidValue, addFluidObserver, removeFluidObserver, getFluidObservers } from \"@react-spring/shared\";\nimport { AnimatedValue, AnimatedString, getPayload, getAnimated as getAnimated2, setAnimated, getAnimatedType } from \"@react-spring/animated\";\n\n// src/AnimationConfig.ts\nimport { is as is2, easings } from \"@react-spring/shared\";\n\n// src/constants.ts\nvar config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n\n// src/AnimationConfig.ts\nvar defaults = _objectSpread({}, config.default, {\n  mass: 1,\n  damping: 1,\n  easing: easings.linear,\n  clamp: false\n});\nvar AnimationConfig = function AnimationConfig() {\n  _classCallCheck(this, AnimationConfig);\n  /**\n   * The initial velocity of one or more values.\n   *\n   * @default 0\n   */\n  this.velocity = 0;\n  Object.assign(this, defaults);\n};\nfunction mergeConfig(config2, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = _objectSpread({}, defaultConfig);\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = _objectSpread({}, defaultConfig, newConfig);\n  }\n  sanitizeConfig(config2, newConfig);\n  Object.assign(config2, newConfig);\n  for (var key in defaults) {\n    if (config2[key] == null) {\n      config2[key] = defaults[key];\n    }\n  }\n  var frequency = config2.frequency,\n    damping = config2.damping;\n  var mass = config2.mass;\n  if (!is2.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01;\n    if (damping < 0) damping = 0;\n    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config2.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n  return config2;\n}\nfunction sanitizeConfig(config2, props) {\n  if (!is2.und(props.decay)) {\n    config2.duration = void 0;\n  } else {\n    var isTensionConfig = !is2.und(props.tension) || !is2.und(props.friction);\n    if (isTensionConfig || !is2.und(props.frequency) || !is2.und(props.damping) || !is2.und(props.mass)) {\n      config2.duration = void 0;\n      config2.decay = void 0;\n    }\n    if (isTensionConfig) {\n      config2.frequency = void 0;\n    }\n  }\n}\n\n// src/Animation.ts\nvar emptyArray = [];\nvar Animation = function Animation() {\n  _classCallCheck(this, Animation);\n  this.changed = false;\n  this.values = emptyArray;\n  this.toValues = null;\n  this.fromValues = emptyArray;\n  this.config = new AnimationConfig();\n  this.immediate = false;\n};\n\n// src/scheduleProps.ts\nimport { is as is3, raf, Globals as G2 } from \"@react-spring/shared\";\nfunction scheduleProps(callId, _ref) {\n  var key = _ref.key,\n    props = _ref.props,\n    defaultProps = _ref.defaultProps,\n    state = _ref.state,\n    actions = _ref.actions;\n  return new Promise(function (resolve, reject) {\n    var delay;\n    var timeout;\n    var cancel = matchProp(props.cancel ?? defaultProps?.cancel, key);\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is3.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n      var pause = defaultProps?.pause;\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n      delay = callProp(props.delay || 0, key);\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n    function onResume() {\n      if (delay > 0 && !G2.skipAnimation) {\n        state.delayed = true;\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n    function onStart() {\n      if (state.delayed) {\n        state.delayed = false;\n      }\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n      try {\n        actions.start(_objectSpread({}, props, {\n          callId: callId,\n          cancel: cancel\n        }), resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n\n// src/runAsync.ts\nimport { is as is4, raf as raf2, flush, eachProp as eachProp2, Globals as G3 } from \"@react-spring/shared\";\n\n// src/AnimationResult.ts\nvar getCombinedResult = function getCombinedResult(target, results) {\n  return results.length == 1 ? results[0] : results.some(function (result) {\n    return result.cancelled;\n  }) ? getCancelledResult(target.get()) : results.every(function (result) {\n    return result.noop;\n  }) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every(function (result) {\n    return result.finished;\n  }));\n};\nvar getNoopResult = function getNoopResult(value) {\n  return {\n    value: value,\n    noop: true,\n    finished: true,\n    cancelled: false\n  };\n};\nvar getFinishedResult = function getFinishedResult(value, finished) {\n  var cancelled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    value: value,\n    finished: finished,\n    cancelled: cancelled\n  };\n};\nvar getCancelledResult = function getCancelledResult(value) {\n  return {\n    value: value,\n    cancelled: true,\n    finished: false\n  };\n};\n\n// src/runAsync.ts\nfunction runAsync(to2, props, state, target) {\n  var callId = props.callId,\n    parentId = props.parentId,\n    onRest = props.onRest;\n  var prevTo = state.asyncTo,\n    prevPromise = state.promise;\n  if (!parentId && to2 === prevTo && !props.reset) {\n    return prevPromise;\n  }\n  return state.promise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var defaultProps, preventBail, bail, bailPromise, bailIfEnded, animate, result, animating;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          state.asyncId = callId;\n          state.asyncTo = to2;\n          defaultProps = getDefaultProps(props, function (value, key) {\n            return (\n              // The `onRest` prop is only called when the `runAsync` promise is resolved.\n              key === \"onRest\" ? void 0 : value\n            );\n          });\n          bailPromise = new Promise(function (resolve, reject) {\n            return preventBail = resolve, bail = reject;\n          });\n          bailIfEnded = function bailIfEnded(bailSignal) {\n            var bailResult =\n            // The `cancel` prop or `stop` method was used.\n            callId <= (state.cancelId || 0) && getCancelledResult(target) ||\n            // The async `to` prop was replaced.\n            callId !== state.asyncId && getFinishedResult(target, false);\n            if (bailResult) {\n              bailSignal.result = bailResult;\n              bail(bailSignal);\n              throw bailSignal;\n            }\n          };\n          animate = function animate(arg1, arg2) {\n            var bailSignal = new BailSignal();\n            var skipAnimationSignal = new SkipAnimationSignal();\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              var props2, result2;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!G3.skipAnimation) {\n                      _context.next = 5;\n                      break;\n                    }\n                    stopAsync(state);\n                    skipAnimationSignal.result = getFinishedResult(target, false);\n                    bail(skipAnimationSignal);\n                    throw skipAnimationSignal;\n                  case 5:\n                    bailIfEnded(bailSignal);\n                    props2 = is4.obj(arg1) ? _objectSpread({}, arg1) : _objectSpread({}, arg2, {\n                      to: arg1\n                    });\n                    props2.parentId = callId;\n                    eachProp2(defaultProps, function (value, key) {\n                      if (is4.und(props2[key])) {\n                        props2[key] = value;\n                      }\n                    });\n                    _context.next = 11;\n                    return target.start(props2);\n                  case 11:\n                    result2 = _context.sent;\n                    bailIfEnded(bailSignal);\n                    if (!state.paused) {\n                      _context.next = 16;\n                      break;\n                    }\n                    _context.next = 16;\n                    return new Promise(function (resume) {\n                      state.resumeQueue.add(resume);\n                    });\n                  case 16:\n                    return _context.abrupt(\"return\", result2);\n                  case 17:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }))();\n          };\n          if (!G3.skipAnimation) {\n            _context3.next = 9;\n            break;\n          }\n          stopAsync(state);\n          return _context3.abrupt(\"return\", getFinishedResult(target, false));\n        case 9:\n          _context3.prev = 9;\n          if (is4.arr(to2)) {\n            animating = function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(queue) {\n                var _iterator2, _step2, props2;\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _iterator2 = _createForOfIteratorHelper(queue);\n                      _context2.prev = 1;\n                      _iterator2.s();\n                    case 3:\n                      if ((_step2 = _iterator2.n()).done) {\n                        _context2.next = 9;\n                        break;\n                      }\n                      props2 = _step2.value;\n                      _context2.next = 7;\n                      return animate(props2);\n                    case 7:\n                      _context2.next = 3;\n                      break;\n                    case 9:\n                      _context2.next = 14;\n                      break;\n                    case 11:\n                      _context2.prev = 11;\n                      _context2.t0 = _context2[\"catch\"](1);\n                      _iterator2.e(_context2.t0);\n                    case 14:\n                      _context2.prev = 14;\n                      _iterator2.f();\n                      return _context2.finish(14);\n                    case 17:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2, null, [[1, 11, 14, 17]]);\n              }));\n              return function (_x) {\n                return _ref4.apply(this, arguments);\n              };\n            }()(to2);\n          } else {\n            animating = Promise.resolve(to2(animate, target.stop.bind(target)));\n          }\n          _context3.next = 13;\n          return Promise.all([animating.then(preventBail), bailPromise]);\n        case 13:\n          result = getFinishedResult(target.get(), true, false);\n          _context3.next = 27;\n          break;\n        case 16:\n          _context3.prev = 16;\n          _context3.t0 = _context3[\"catch\"](9);\n          if (!(_context3.t0 instanceof BailSignal)) {\n            _context3.next = 22;\n            break;\n          }\n          result = _context3.t0.result;\n          _context3.next = 27;\n          break;\n        case 22:\n          if (!(_context3.t0 instanceof SkipAnimationSignal)) {\n            _context3.next = 26;\n            break;\n          }\n          result = _context3.t0.result;\n          _context3.next = 27;\n          break;\n        case 26:\n          throw _context3.t0;\n        case 27:\n          _context3.prev = 27;\n          if (callId == state.asyncId) {\n            state.asyncId = parentId;\n            state.asyncTo = parentId ? prevTo : void 0;\n            state.promise = parentId ? prevPromise : void 0;\n          }\n          return _context3.finish(27);\n        case 30:\n          if (is4.fun(onRest)) {\n            raf2.batchedUpdates(function () {\n              onRest(result, target, target.item);\n            });\n          }\n          return _context3.abrupt(\"return\", result);\n        case 32:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[9, 16, 27, 30]]);\n  }))();\n}\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, function (t) {\n    return t.cancel();\n  });\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = void 0;\n  if (cancelId) state.cancelId = cancelId;\n}\nvar BailSignal = /*#__PURE__*/function (_Error) {\n  _inherits(BailSignal, _Error);\n  function BailSignal() {\n    _classCallCheck(this, BailSignal);\n    return _possibleConstructorReturn(this, _getPrototypeOf(BailSignal).call(this, \"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\"));\n  }\n  return BailSignal;\n}(_wrapNativeSuper(Error));\nvar SkipAnimationSignal = /*#__PURE__*/function (_Error2) {\n  _inherits(SkipAnimationSignal, _Error2);\n  function SkipAnimationSignal() {\n    _classCallCheck(this, SkipAnimationSignal);\n    return _possibleConstructorReturn(this, _getPrototypeOf(SkipAnimationSignal).call(this, \"SkipAnimationSignal\"));\n  }\n  return SkipAnimationSignal;\n}(_wrapNativeSuper(Error));\n\n// src/FrameValue.ts\nimport { deprecateInterpolate, frameLoop, FluidValue as FluidValue2, Globals as G4, callFluidObservers } from \"@react-spring/shared\";\nimport { getAnimated } from \"@react-spring/animated\";\nvar isFrameValue = function isFrameValue(value) {\n  return value instanceof FrameValue;\n};\nvar nextId = 1;\nvar FrameValue = /*#__PURE__*/function (_FluidValue) {\n  _inherits(FrameValue, _FluidValue);\n  function FrameValue() {\n    var _this;\n    _classCallCheck(this, FrameValue);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FrameValue).apply(this, arguments));\n    _this.id = nextId++;\n    _this._priority = 0;\n    return _this;\n  }\n  _createClass(FrameValue, [{\n    key: \"get\",\n    /** Get the current value */value: function get() {\n      var node = getAnimated(this);\n      return node && node.getValue();\n    } /** Create a spring that maps our value to another value */\n  }, {\n    key: \"to\",\n    value: function to() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return G4.to(this, args);\n    } /** @deprecated Use the `to` method instead. */\n  }, {\n    key: \"interpolate\",\n    value: function interpolate() {\n      deprecateInterpolate();\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return G4.to(this, args);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.get();\n    }\n  }, {\n    key: \"observerAdded\",\n    value: function observerAdded(count) {\n      if (count == 1) this._attach();\n    }\n  }, {\n    key: \"observerRemoved\",\n    value: function observerRemoved(count) {\n      if (count == 0) this._detach();\n    } /** Called when the first child is added. */\n  }, {\n    key: \"_attach\",\n    value: function _attach() {} /** Called when the last child is removed. */\n  }, {\n    key: \"_detach\",\n    value: function _detach() {} /** Tell our children about our new value */\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(value) {\n      var idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      callFluidObservers(this, {\n        type: \"change\",\n        parent: this,\n        value: value,\n        idle: idle\n      });\n    } /** Tell our children about our new priority */\n  }, {\n    key: \"_onPriorityChange\",\n    value: function _onPriorityChange(priority) {\n      if (!this.idle) {\n        frameLoop.sort(this);\n      }\n      callFluidObservers(this, {\n        type: \"priority\",\n        parent: this,\n        priority: priority\n      });\n    }\n  }, {\n    key: \"priority\",\n    get: function get() {\n      return this._priority;\n    },\n    set: function set(priority) {\n      if (this._priority != priority) {\n        this._priority = priority;\n        this._onPriorityChange(priority);\n      }\n    }\n  }]);\n  return FrameValue;\n}(FluidValue2);\n\n// src/SpringPhase.ts\nvar $P = Symbol.for(\"SpringPhase\");\nvar HAS_ANIMATED = 1;\nvar IS_ANIMATING = 2;\nvar IS_PAUSED = 4;\nvar hasAnimated = function hasAnimated(target) {\n  return (target[$P] & HAS_ANIMATED) > 0;\n};\nvar isAnimating = function isAnimating(target) {\n  return (target[$P] & IS_ANIMATING) > 0;\n};\nvar isPaused = function isPaused(target) {\n  return (target[$P] & IS_PAUSED) > 0;\n};\nvar setActiveBit = function setActiveBit(target, active) {\n  return active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\n};\nvar setPausedBit = function setPausedBit(target, paused) {\n  return paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n};\n\n// src/SpringValue.ts\nvar SpringValue = /*#__PURE__*/function (_FrameValue) {\n  _inherits(SpringValue, _FrameValue);\n  function SpringValue(arg1, arg2) {\n    var _this2;\n    _classCallCheck(this, SpringValue);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(SpringValue).call(this));\n    /** The animation state */\n    _this2.animation = new Animation();\n    /** Some props have customizable default values */\n    _this2.defaultProps = {};\n    /** The state for `runAsync` calls */\n    _this2._state = {\n      paused: false,\n      delayed: false,\n      pauseQueue: /* @__PURE__ */new Set(),\n      resumeQueue: /* @__PURE__ */new Set(),\n      timeouts: /* @__PURE__ */new Set()\n    };\n    /** The promise resolvers of pending `start` calls */\n    _this2._pendingCalls = /* @__PURE__ */new Set();\n    /** The counter for tracking `scheduleProps` calls */\n    _this2._lastCallId = 0;\n    /** The last `scheduleProps` call that changed the `to` prop */\n    _this2._lastToId = 0;\n    _this2._memoizedDuration = 0;\n    if (!is5.und(arg1) || !is5.und(arg2)) {\n      var props = is5.obj(arg1) ? _objectSpread({}, arg1) : _objectSpread({}, arg2, {\n        from: arg1\n      });\n      if (is5.und(props.default)) {\n        props.default = true;\n      }\n      _this2.start(props);\n    }\n    return _this2;\n  }\n  /** Equals true when not advancing on each frame. */\n  _createClass(SpringValue, [{\n    key: \"advance\",\n    /** Advance the current animation by a number of milliseconds */value: function advance(dt) {\n      var _this3 = this;\n      var idle = true;\n      var changed = false;\n      var anim = this.animation;\n      var toValues = anim.toValues;\n      var config2 = anim.config;\n      var payload = getPayload(anim.to);\n      if (!payload && hasFluidValue(anim.to)) {\n        toValues = toArray2(getFluidValue2(anim.to));\n      }\n      anim.values.forEach(function (node2, i) {\n        if (node2.done) return;\n        var to2 =\n        // Animated strings always go from 0 to 1.\n        node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n        var finished = anim.immediate;\n        var position = to2;\n        if (!finished) {\n          position = node2.lastPosition;\n          if (config2.tension <= 0) {\n            node2.done = true;\n            return;\n          }\n          var elapsed = node2.elapsedTime += dt;\n          var from = anim.fromValues[i];\n          var v0 = node2.v0 != null ? node2.v0 : node2.v0 = is5.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;\n          var velocity;\n          var precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));\n          if (!is5.und(config2.duration)) {\n            var p = 1;\n            if (config2.duration > 0) {\n              if (_this3._memoizedDuration !== config2.duration) {\n                _this3._memoizedDuration = config2.duration;\n                if (node2.durationProgress > 0) {\n                  node2.elapsedTime = config2.duration * node2.durationProgress;\n                  elapsed = node2.elapsedTime += dt;\n                }\n              }\n              p = (config2.progress || 0) + elapsed / _this3._memoizedDuration;\n              p = p > 1 ? 1 : p < 0 ? 0 : p;\n              node2.durationProgress = p;\n            }\n            position = from + config2.easing(p) * (to2 - from);\n            velocity = (position - node2.lastPosition) / dt;\n            finished = p == 1;\n          } else if (config2.decay) {\n            var decay = config2.decay === true ? 0.998 : config2.decay;\n            var e = Math.exp(-(1 - decay) * elapsed);\n            position = from + v0 / (1 - decay) * (1 - e);\n            finished = Math.abs(node2.lastPosition - position) <= precision;\n            velocity = v0 * e;\n          } else {\n            velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n            var restVelocity = config2.restVelocity || precision / 10;\n            var bounceFactor = config2.clamp ? 0 : config2.bounce;\n            var canBounce = !is5.und(bounceFactor);\n            var isGrowing = from == to2 ? node2.v0 > 0 : from < to2;\n            var isMoving;\n            var isBouncing = false;\n            var step = 1;\n            var numSteps = Math.ceil(dt / step);\n            for (var n = 0; n < numSteps; ++n) {\n              isMoving = Math.abs(velocity) > restVelocity;\n              if (!isMoving) {\n                finished = Math.abs(to2 - position) <= precision;\n                if (finished) {\n                  break;\n                }\n              }\n              if (canBounce) {\n                isBouncing = position == to2 || position > to2 == isGrowing;\n                if (isBouncing) {\n                  velocity = -velocity * bounceFactor;\n                  position = to2;\n                }\n              }\n              var springForce = -config2.tension * 1e-6 * (position - to2);\n              var dampingForce = -config2.friction * 1e-3 * velocity;\n              var acceleration = (springForce + dampingForce) / config2.mass;\n              velocity = velocity + acceleration * step;\n              position = position + velocity * step;\n            }\n          }\n          node2.lastVelocity = velocity;\n          if (Number.isNaN(position)) {\n            console.warn(\"Got NaN while animating:\", _this3);\n            finished = true;\n          }\n        }\n        if (payload && !payload[i].done) {\n          finished = false;\n        }\n        if (finished) {\n          node2.done = true;\n        } else {\n          idle = false;\n        }\n        if (node2.setValue(position, config2.round)) {\n          changed = true;\n        }\n      });\n      var node = getAnimated2(this);\n      var currVal = node.getValue();\n      if (idle) {\n        var finalVal = getFluidValue2(anim.to);\n        if ((currVal !== finalVal || changed) && !config2.decay) {\n          node.setValue(finalVal);\n          this._onChange(finalVal);\n        } else if (changed && config2.decay) {\n          this._onChange(currVal);\n        }\n        this._stop();\n      } else if (changed) {\n        this._onChange(currVal);\n      }\n    } /** Set the current value, while stopping the current animation */\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      var _this4 = this;\n      raf3.batchedUpdates(function () {\n        _this4._stop();\n        _this4._focus(value);\n        _this4._set(value);\n      });\n      return this;\n    }\n    /**\n     * Freeze the active animation in time, as well as any updates merged\n     * before `resume` is called.\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this._update({\n        pause: true\n      });\n    } /** Resume the animation if paused. */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this._update({\n        pause: false\n      });\n    } /** Skip to the end of the current animation. */\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      var _this5 = this;\n      if (isAnimating(this)) {\n        var _this$animation = this.animation,\n          to2 = _this$animation.to,\n          config2 = _this$animation.config;\n        raf3.batchedUpdates(function () {\n          _this5._onStart();\n          if (!config2.decay) {\n            _this5._set(to2, false);\n          }\n          _this5._stop();\n        });\n      }\n      return this;\n    } /** Push props into the pending queue. */\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      var queue = this.queue || (this.queue = []);\n      queue.push(props);\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start(to2, arg2) {\n      var _this6 = this;\n      var queue;\n      if (!is5.und(to2)) {\n        queue = [is5.obj(to2) ? to2 : _objectSpread({}, arg2, {\n          to: to2\n        })];\n      } else {\n        queue = this.queue || [];\n        this.queue = [];\n      }\n      return Promise.all(queue.map(function (props) {\n        var up = _this6._update(props);\n        return up;\n      })).then(function (results) {\n        return getCombinedResult(_this6, results);\n      });\n    }\n    /**\n     * Stop the current animation, and cancel any delayed updates.\n     *\n     * Pass `true` to call `onRest` with `cancelled: true`.\n     */\n  }, {\n    key: \"stop\",\n    value: function stop(cancel) {\n      var _this7 = this;\n      var to2 = this.animation.to;\n      this._focus(this.get());\n      stopAsync(this._state, cancel && this._lastCallId);\n      raf3.batchedUpdates(function () {\n        return _this7._stop(to2, cancel);\n      });\n      return this;\n    } /** Restart the animation. */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._update({\n        reset: true\n      });\n    } /** @internal */\n  }, {\n    key: \"eventObserved\",\n    value: function eventObserved(event) {\n      if (event.type == \"change\") {\n        this._start();\n      } else if (event.type == \"priority\") {\n        this.priority = event.priority + 1;\n      }\n    }\n    /**\n     * Parse the `to` and `from` range from the given `props` object.\n     *\n     * This also ensures the initial value is available to animated components\n     * during the render phase.\n     */\n  }, {\n    key: \"_prepareNode\",\n    value: function _prepareNode(props) {\n      var key = this.key || \"\";\n      var to2 = props.to,\n        from = props.from;\n      to2 = is5.obj(to2) ? to2[key] : to2;\n      if (to2 == null || isAsyncTo(to2)) {\n        to2 = void 0;\n      }\n      from = is5.obj(from) ? from[key] : from;\n      if (from == null) {\n        from = void 0;\n      }\n      var range = {\n        to: to2,\n        from: from\n      };\n      if (!hasAnimated(this)) {\n        if (props.reverse) {\n          var _ref5 = [from, to2];\n          to2 = _ref5[0];\n          from = _ref5[1];\n        }\n        from = getFluidValue2(from);\n        if (!is5.und(from)) {\n          this._set(from);\n        } else if (!getAnimated2(this)) {\n          this._set(to2);\n        }\n      }\n      return range;\n    } /** Every update is processed by this method before merging. */\n  }, {\n    key: \"_update\",\n    value: function _update(_ref6, isLoop) {\n      var _this8 = this;\n      var props = _extends({}, _ref6);\n      var key = this.key,\n        defaultProps = this.defaultProps;\n      if (props.default) Object.assign(defaultProps, getDefaultProps(props, function (value, prop) {\n        return /^on/.test(prop) ? resolveProp(value, key) : value;\n      }));\n      mergeActiveFn(this, props, \"onProps\");\n      sendEvent(this, \"onProps\", props, this);\n      var range = this._prepareNode(props);\n      if (Object.isFrozen(this)) {\n        throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n      }\n      var state = this._state;\n      return scheduleProps(++this._lastCallId, {\n        key: key,\n        props: props,\n        defaultProps: defaultProps,\n        state: state,\n        actions: {\n          pause: function pause() {\n            if (!isPaused(_this8)) {\n              setPausedBit(_this8, true);\n              flushCalls(state.pauseQueue);\n              sendEvent(_this8, \"onPause\", getFinishedResult(_this8, checkFinished(_this8, _this8.animation.to)), _this8);\n            }\n          },\n          resume: function resume() {\n            if (isPaused(_this8)) {\n              setPausedBit(_this8, false);\n              if (isAnimating(_this8)) {\n                _this8._resume();\n              }\n              flushCalls(state.resumeQueue);\n              sendEvent(_this8, \"onResume\", getFinishedResult(_this8, checkFinished(_this8, _this8.animation.to)), _this8);\n            }\n          },\n          start: this._merge.bind(this, range)\n        }\n      }).then(function (result) {\n        if (props.loop && result.finished && !(isLoop && result.noop)) {\n          var nextProps = createLoopUpdate(props);\n          if (nextProps) {\n            return _this8._update(nextProps, true);\n          }\n        }\n        return result;\n      });\n    } /** Merge props into the current animation */\n  }, {\n    key: \"_merge\",\n    value: function _merge(range, props, resolve) {\n      var _this9 = this;\n      if (props.cancel) {\n        this.stop(true);\n        return resolve(getCancelledResult(this));\n      }\n      var hasToProp = !is5.und(range.to);\n      var hasFromProp = !is5.und(range.from);\n      if (hasToProp || hasFromProp) {\n        if (props.callId > this._lastToId) {\n          this._lastToId = props.callId;\n        } else {\n          return resolve(getCancelledResult(this));\n        }\n      }\n      var key = this.key,\n        defaultProps = this.defaultProps,\n        anim = this.animation;\n      var prevTo = anim.to,\n        prevFrom = anim.from;\n      var _range$to = range.to,\n        to2 = _range$to === void 0 ? prevTo : _range$to,\n        _range$from = range.from,\n        from = _range$from === void 0 ? prevFrom : _range$from;\n      if (hasFromProp && !hasToProp && (!props.default || is5.und(to2))) {\n        to2 = from;\n      }\n      if (props.reverse) {\n        var _ref7 = [from, to2];\n        to2 = _ref7[0];\n        from = _ref7[1];\n      }\n      var hasFromChanged = !isEqual(from, prevFrom);\n      if (hasFromChanged) {\n        anim.from = from;\n      }\n      from = getFluidValue2(from);\n      var hasToChanged = !isEqual(to2, prevTo);\n      if (hasToChanged) {\n        this._focus(to2);\n      }\n      var hasAsyncTo = isAsyncTo(props.to);\n      var config2 = anim.config;\n      var decay = config2.decay,\n        velocity = config2.velocity;\n      if (hasToProp || hasFromProp) {\n        config2.velocity = 0;\n      }\n      if (props.config && !hasAsyncTo) {\n        mergeConfig(config2, callProp(props.config, key),\n        // Avoid calling the same \"config\" prop twice.\n        props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n      }\n      var node = getAnimated2(this);\n      if (!node || is5.und(to2)) {\n        return resolve(getFinishedResult(this, true));\n      }\n      var reset =\n      // When `reset` is undefined, the `from` prop implies `reset: true`,\n      // except for declarative updates. When `reset` is defined, there\n      // must exist a value to animate from.\n      is5.und(props.reset) ? hasFromProp && !props.default : !is5.und(from) && matchProp(props.reset, key);\n      var value = reset ? from : this.get();\n      var goal = computeGoal(to2);\n      var isAnimatable = is5.num(goal) || is5.arr(goal) || isAnimatedString2(goal);\n      var immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n      if (hasToChanged) {\n        var nodeType = getAnimatedType(to2);\n        if (nodeType !== node.constructor) {\n          if (immediate) {\n            node = this._set(goal);\n          } else throw Error(\"Cannot animate between \".concat(node.constructor.name, \" and \").concat(nodeType.name, \", as the \\\"to\\\" prop suggests\"));\n        }\n      }\n      var goalType = node.constructor;\n      var started = hasFluidValue(to2);\n      var finished = false;\n      if (!started) {\n        var hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n        if (hasToChanged || hasValueChanged) {\n          finished = isEqual(computeGoal(value), goal);\n          started = !finished;\n        }\n        if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {\n          started = true;\n        }\n      }\n      if (finished && isAnimating(this)) {\n        if (anim.changed && !reset) {\n          started = true;\n        } else if (!started) {\n          this._stop(prevTo);\n        }\n      }\n      if (!hasAsyncTo) {\n        if (started || hasFluidValue(prevTo)) {\n          anim.values = node.getPayload();\n          anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray2(goal);\n        }\n        if (anim.immediate != immediate) {\n          anim.immediate = immediate;\n          if (!immediate && !reset) {\n            this._set(prevTo);\n          }\n        }\n        if (started) {\n          var onRest = anim.onRest;\n          each2(ACTIVE_EVENTS, function (type) {\n            return mergeActiveFn(_this9, props, type);\n          });\n          var result = getFinishedResult(this, checkFinished(this, prevTo));\n          flushCalls(this._pendingCalls, result);\n          this._pendingCalls.add(resolve);\n          if (anim.changed) raf3.batchedUpdates(function () {\n            anim.changed = !reset;\n            onRest?.(result, _this9);\n            if (reset) {\n              callProp(defaultProps.onRest, result);\n            } else {\n              anim.onStart?.(result, _this9);\n            }\n          });\n        }\n      }\n      if (reset) {\n        this._set(value);\n      }\n      if (hasAsyncTo) {\n        resolve(runAsync(props.to, props, this._state, this));\n      } else if (started) {\n        this._start();\n      } else if (isAnimating(this) && !hasToChanged) {\n        this._pendingCalls.add(resolve);\n      } else {\n        resolve(getNoopResult(value));\n      }\n    } /** Update the `animation.to` value, which might be a `FluidValue` */\n  }, {\n    key: \"_focus\",\n    value: function _focus(value) {\n      var anim = this.animation;\n      if (value !== anim.to) {\n        if (getFluidObservers(this)) {\n          this._detach();\n        }\n        anim.to = value;\n        if (getFluidObservers(this)) {\n          this._attach();\n        }\n      }\n    }\n  }, {\n    key: \"_attach\",\n    value: function _attach() {\n      var priority = 0;\n      var to2 = this.animation.to;\n      if (hasFluidValue(to2)) {\n        addFluidObserver(to2, this);\n        if (isFrameValue(to2)) {\n          priority = to2.priority + 1;\n        }\n      }\n      this.priority = priority;\n    }\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      var to2 = this.animation.to;\n      if (hasFluidValue(to2)) {\n        removeFluidObserver(to2, this);\n      }\n    }\n    /**\n     * Update the current value from outside the frameloop,\n     * and return the `Animated` node.\n     */\n  }, {\n    key: \"_set\",\n    value: function _set(arg) {\n      var _this10 = this;\n      var idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var value = getFluidValue2(arg);\n      if (!is5.und(value)) {\n        var oldNode = getAnimated2(this);\n        if (!oldNode || !isEqual(value, oldNode.getValue())) {\n          var nodeType = getAnimatedType(value);\n          if (!oldNode || oldNode.constructor != nodeType) {\n            setAnimated(this, nodeType.create(value));\n          } else {\n            oldNode.setValue(value);\n          }\n          if (oldNode) {\n            raf3.batchedUpdates(function () {\n              _this10._onChange(value, idle);\n            });\n          }\n        }\n      }\n      return getAnimated2(this);\n    }\n  }, {\n    key: \"_onStart\",\n    value: function _onStart() {\n      var anim = this.animation;\n      if (!anim.changed) {\n        anim.changed = true;\n        sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n      }\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(value, idle) {\n      if (!idle) {\n        this._onStart();\n        callProp(this.animation.onChange, value, this);\n      }\n      callProp(this.defaultProps.onChange, value, this);\n      _get(_getPrototypeOf(SpringValue.prototype), \"_onChange\", this).call(this, value, idle);\n    } // This method resets the animation state (even if already animating) to\n    // ensure the latest from/to range is used, and it also ensures this spring\n    // is added to the frameloop.\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      var anim = this.animation;\n      getAnimated2(this).reset(getFluidValue2(anim.to));\n      if (!anim.immediate) {\n        anim.fromValues = anim.values.map(function (node) {\n          return node.lastPosition;\n        });\n      }\n      if (!isAnimating(this)) {\n        setActiveBit(this, true);\n        if (!isPaused(this)) {\n          this._resume();\n        }\n      }\n    }\n  }, {\n    key: \"_resume\",\n    value: function _resume() {\n      if (G5.skipAnimation) {\n        this.finish();\n      } else {\n        frameLoop2.start(this);\n      }\n    }\n    /**\n     * Exit the frameloop and notify `onRest` listeners.\n     *\n     * Always wrap `_stop` calls with `batchedUpdates`.\n     */\n  }, {\n    key: \"_stop\",\n    value: function _stop(goal, cancel) {\n      if (isAnimating(this)) {\n        setActiveBit(this, false);\n        var anim = this.animation;\n        each2(anim.values, function (node) {\n          node.done = true;\n        });\n        if (anim.toValues) {\n          anim.onChange = anim.onPause = anim.onResume = void 0;\n        }\n        callFluidObservers2(this, {\n          type: \"idle\",\n          parent: this\n        });\n        var result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));\n        flushCalls(this._pendingCalls, result);\n        if (anim.changed) {\n          anim.changed = false;\n          sendEvent(this, \"onRest\", result, this);\n        }\n      }\n    }\n  }, {\n    key: \"idle\",\n    get: function get() {\n      return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n    }\n  }, {\n    key: \"goal\",\n    get: function get() {\n      return getFluidValue2(this.animation.to);\n    }\n  }, {\n    key: \"velocity\",\n    get: function get() {\n      var node = getAnimated2(this);\n      return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(function (node2) {\n        return node2.lastVelocity || 0;\n      });\n    }\n    /**\n     * When true, this value has been animated at least once.\n     */\n  }, {\n    key: \"hasAnimated\",\n    get: function get() {\n      return hasAnimated(this);\n    }\n    /**\n     * When true, this value has an unfinished animation,\n     * which is either active or paused.\n     */\n  }, {\n    key: \"isAnimating\",\n    get: function get() {\n      return isAnimating(this);\n    }\n    /**\n     * When true, all current and future animations are paused.\n     */\n  }, {\n    key: \"isPaused\",\n    get: function get() {\n      return isPaused(this);\n    }\n    /**\n     *\n     *\n     */\n  }, {\n    key: \"isDelayed\",\n    get: function get() {\n      return this._state.delayed;\n    }\n  }]);\n  return SpringValue;\n}(FrameValue);\nfunction checkFinished(target, to2) {\n  var goal = computeGoal(to2);\n  var value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\nfunction createLoopUpdate(props) {\n  var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.loop;\n  var to2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.to;\n  var loopRet = callProp(loop);\n  if (loopRet) {\n    var overrides = loopRet !== true && inferTo(loopRet);\n    var reverse = (overrides || props).reverse;\n    var reset = !overrides || overrides.reset;\n    return createUpdate(_objectSpread({}, props, {\n      loop: loop,\n      // Avoid updating default props when looping.\n      default: false,\n      // Never loop the `pause` prop.\n      pause: void 0,\n      // For the \"reverse\" prop to loop as expected, the \"to\" prop\n      // must be undefined. The \"reverse\" prop is ignored when the\n      // \"to\" prop is an array or function.\n      to: !reverse || isAsyncTo(to2) ? to2 : void 0,\n      // Ignore the \"from\" prop except on reset.\n      from: reset ? props.from : void 0,\n      reset: reset\n    }, overrides));\n  }\n}\nfunction createUpdate(props) {\n  var _props = props = inferTo(props),\n    to2 = _props.to,\n    from = _props.from;\n  var keys = /* @__PURE__ */new Set();\n  if (is5.obj(to2)) findDefined(to2, keys);\n  if (is5.obj(from)) findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\nfunction declareUpdate(props) {\n  var update2 = createUpdate(props);\n  if (is5.und(update2.default)) {\n    update2.default = getDefaultProps(update2);\n  }\n  return update2;\n}\nfunction findDefined(values, keys) {\n  eachProp3(values, function (value, key) {\n    return value != null && keys.add(key);\n  });\n}\nvar ACTIVE_EVENTS = [\"onStart\", \"onRest\", \"onChange\", \"onPause\", \"onResume\"];\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\nfunction sendEvent(target, type) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    args[_key4 - 2] = arguments[_key4];\n  }\n  target.animation[type]?.(...args);\n  target.defaultProps[type]?.(...args);\n}\n\n// src/Controller.ts\nimport { is as is6, raf as raf4, each as each3, noop, flush as flush2, toArray as toArray3, eachProp as eachProp4, flushCalls as flushCalls2, addFluidObserver as addFluidObserver2 } from \"@react-spring/shared\";\nvar BATCHED_EVENTS = [\"onStart\", \"onChange\", \"onRest\"];\nvar nextId2 = 1;\nvar Controller = /*#__PURE__*/function () {\n  function Controller(props, flush3) {\n    _classCallCheck(this, Controller);\n    this.id = nextId2++;\n    /** The animated values */\n    this.springs = {};\n    /** The queue of props passed to the `update` method. */\n    this.queue = [];\n    /** The counter for tracking `scheduleProps` calls */\n    this._lastAsyncId = 0;\n    /** The values currently being animated */\n    this._active = /* @__PURE__ */new Set();\n    /** The values that changed recently */\n    this._changed = /* @__PURE__ */new Set();\n    /** Equals false when `onStart` listeners can be called */\n    this._started = false;\n    /** State used by the `runAsync` function */\n    this._state = {\n      paused: false,\n      pauseQueue: /* @__PURE__ */new Set(),\n      resumeQueue: /* @__PURE__ */new Set(),\n      timeouts: /* @__PURE__ */new Set()\n    };\n    /** The event queues that are flushed once per frame maximum */\n    this._events = {\n      onStart: /* @__PURE__ */new Map(),\n      onChange: /* @__PURE__ */new Map(),\n      onRest: /* @__PURE__ */new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n    if (flush3) {\n      this._flush = flush3;\n    }\n    if (props) {\n      this.start(_objectSpread({\n        default: true\n      }, props));\n    }\n  }\n  /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */\n  _createClass(Controller, [{\n    key: \"get\",\n    /** Get the current values of our springs */value: function get() {\n      var values = {};\n      this.each(function (spring, key) {\n        return values[key] = spring.get();\n      });\n      return values;\n    } /** Set the current values without animating. */\n  }, {\n    key: \"set\",\n    value: function set(values) {\n      for (var key in values) {\n        var value = values[key];\n        if (!is6.und(value)) {\n          this.springs[key].set(value);\n        }\n      }\n    } /** Push an update onto the queue of each value. */\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      if (props) {\n        this.queue.push(createUpdate(props));\n      }\n      return this;\n    }\n    /**\n     * Start the queued animations for every spring, and resolve the returned\n     * promise once all queued animations have finished or been cancelled.\n     *\n     * When you pass a queue (instead of nothing), that queue is used instead of\n     * the queued animations added with the `update` method, which are left alone.\n     */\n  }, {\n    key: \"start\",\n    value: function start(props) {\n      var queue = this.queue;\n      if (props) {\n        queue = toArray3(props).map(createUpdate);\n      } else {\n        this.queue = [];\n      }\n      if (this._flush) {\n        return this._flush(this, queue);\n      }\n      prepareKeys(this, queue);\n      return flushUpdateQueue(this, queue);\n    } /** @internal */\n  }, {\n    key: \"stop\",\n    value: function stop(arg, keys) {\n      if (arg !== !!arg) {\n        keys = arg;\n      }\n      if (keys) {\n        var springs = this.springs;\n        each3(toArray3(keys), function (key) {\n          return springs[key].stop(!!arg);\n        });\n      } else {\n        stopAsync(this._state, this._lastAsyncId);\n        this.each(function (spring) {\n          return spring.stop(!!arg);\n        });\n      }\n      return this;\n    } /** Freeze the active animation in time */\n  }, {\n    key: \"pause\",\n    value: function pause(keys) {\n      if (is6.und(keys)) {\n        this.start({\n          pause: true\n        });\n      } else {\n        var springs = this.springs;\n        each3(toArray3(keys), function (key) {\n          return springs[key].pause();\n        });\n      }\n      return this;\n    } /** Resume the animation if paused. */\n  }, {\n    key: \"resume\",\n    value: function resume(keys) {\n      if (is6.und(keys)) {\n        this.start({\n          pause: false\n        });\n      } else {\n        var springs = this.springs;\n        each3(toArray3(keys), function (key) {\n          return springs[key].resume();\n        });\n      }\n      return this;\n    } /** Call a function once per spring value */\n  }, {\n    key: \"each\",\n    value: function each(iterator) {\n      eachProp4(this.springs, iterator);\n    } /** @internal Called at the end of every animation frame */\n  }, {\n    key: \"_onFrame\",\n    value: function _onFrame() {\n      var _this11 = this;\n      var _this$_events = this._events,\n        onStart = _this$_events.onStart,\n        onChange = _this$_events.onChange,\n        onRest = _this$_events.onRest;\n      var active = this._active.size > 0;\n      var changed = this._changed.size > 0;\n      if (active && !this._started || changed && !this._started) {\n        this._started = true;\n        flush2(onStart, function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 2),\n            onStart2 = _ref9[0],\n            result = _ref9[1];\n          result.value = _this11.get();\n          onStart2(result, _this11, _this11._item);\n        });\n      }\n      var idle = !active && this._started;\n      var values = changed || idle && onRest.size ? this.get() : null;\n      if (changed && onChange.size) {\n        flush2(onChange, function (_ref10) {\n          var _ref11 = _slicedToArray(_ref10, 2),\n            onChange2 = _ref11[0],\n            result = _ref11[1];\n          result.value = values;\n          onChange2(result, _this11, _this11._item);\n        });\n      }\n      if (idle) {\n        this._started = false;\n        flush2(onRest, function (_ref12) {\n          var _ref13 = _slicedToArray(_ref12, 2),\n            onRest2 = _ref13[0],\n            result = _ref13[1];\n          result.value = values;\n          onRest2(result, _this11, _this11._item);\n        });\n      }\n    } /** @internal */\n  }, {\n    key: \"eventObserved\",\n    value: function eventObserved(event) {\n      if (event.type == \"change\") {\n        this._changed.add(event.parent);\n        if (!event.idle) {\n          this._active.add(event.parent);\n        }\n      } else if (event.type == \"idle\") {\n        this._active.delete(event.parent);\n      } else return;\n      raf4.onFrame(this._onFrame);\n    }\n  }, {\n    key: \"idle\",\n    get: function get() {\n      return !this._state.asyncTo && Object.values(this.springs).every(function (spring) {\n        return spring.idle && !spring.isDelayed && !spring.isPaused;\n      });\n    }\n  }, {\n    key: \"item\",\n    get: function get() {\n      return this._item;\n    },\n    set: function set(item) {\n      this._item = item;\n    }\n  }]);\n  return Controller;\n}();\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map(function (props) {\n    return flushUpdate(ctrl, props);\n  })).then(function (results) {\n    return getCombinedResult(ctrl, results);\n  });\n}\nfunction flushUpdate(_x2, _x3, _x4) {\n  return _flushUpdate.apply(this, arguments);\n}\nfunction _flushUpdate() {\n  _flushUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(ctrl, props, isLoop) {\n    var keys, to2, from, loop, onRest, onResolve, defaults2, asyncTo, state, promises, cancel, result, nextProps;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          keys = props.keys, to2 = props.to, from = props.from, loop = props.loop, onRest = props.onRest, onResolve = props.onResolve;\n          defaults2 = is6.obj(props.default) && props.default;\n          if (loop) {\n            props.loop = false;\n          }\n          if (to2 === false) props.to = null;\n          if (from === false) props.from = null;\n          asyncTo = is6.arr(to2) || is6.fun(to2) ? to2 : void 0;\n          if (asyncTo) {\n            props.to = void 0;\n            props.onRest = void 0;\n            if (defaults2) {\n              defaults2.onRest = void 0;\n            }\n          } else {\n            each3(BATCHED_EVENTS, function (key) {\n              var handler = props[key];\n              if (is6.fun(handler)) {\n                var queue = ctrl[\"_events\"][key];\n                props[key] = function (_ref29) {\n                  var finished = _ref29.finished,\n                    cancelled = _ref29.cancelled;\n                  var result2 = queue.get(handler);\n                  if (result2) {\n                    if (!finished) result2.finished = false;\n                    if (cancelled) result2.cancelled = true;\n                  } else {\n                    queue.set(handler, {\n                      value: null,\n                      finished: finished || false,\n                      cancelled: cancelled || false\n                    });\n                  }\n                };\n                if (defaults2) {\n                  defaults2[key] = props[key];\n                }\n              }\n            });\n          }\n          state = ctrl[\"_state\"];\n          if (props.pause === !state.paused) {\n            state.paused = props.pause;\n            flushCalls2(props.pause ? state.pauseQueue : state.resumeQueue);\n          } else if (state.paused) {\n            props.pause = true;\n          }\n          promises = (keys || Object.keys(ctrl.springs)).map(function (key) {\n            return ctrl.springs[key].start(props);\n          });\n          cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n          if (asyncTo || cancel && state.asyncId) {\n            promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n              props: props,\n              state: state,\n              actions: {\n                pause: noop,\n                resume: noop,\n                start: function start(props2, resolve) {\n                  if (cancel) {\n                    stopAsync(state, ctrl[\"_lastAsyncId\"]);\n                    resolve(getCancelledResult(ctrl));\n                  } else {\n                    props2.onRest = onRest;\n                    resolve(runAsync(asyncTo, props2, state, ctrl));\n                  }\n                }\n              }\n            }));\n          }\n          if (!state.paused) {\n            _context4.next = 15;\n            break;\n          }\n          _context4.next = 15;\n          return new Promise(function (resume) {\n            state.resumeQueue.add(resume);\n          });\n        case 15:\n          _context4.t0 = getCombinedResult;\n          _context4.t1 = ctrl;\n          _context4.next = 19;\n          return Promise.all(promises);\n        case 19:\n          _context4.t2 = _context4.sent;\n          result = (0, _context4.t0)(_context4.t1, _context4.t2);\n          if (!(loop && result.finished && !(isLoop && result.noop))) {\n            _context4.next = 26;\n            break;\n          }\n          nextProps = createLoopUpdate(props, loop, to2);\n          if (!nextProps) {\n            _context4.next = 26;\n            break;\n          }\n          prepareKeys(ctrl, [nextProps]);\n          return _context4.abrupt(\"return\", flushUpdate(ctrl, nextProps, true));\n        case 26:\n          if (onResolve) {\n            raf4.batchedUpdates(function () {\n              return onResolve(result, ctrl, ctrl.item);\n            });\n          }\n          return _context4.abrupt(\"return\", result);\n        case 28:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _flushUpdate.apply(this, arguments);\n}\nfunction getSprings(ctrl, props) {\n  var springs = _objectSpread({}, ctrl.springs);\n  if (props) {\n    each3(toArray3(props), function (props2) {\n      if (is6.und(props2.keys)) {\n        props2 = createUpdate(props2);\n      }\n      if (!is6.obj(props2.to)) {\n        props2 = _objectSpread({}, props2, {\n          to: void 0\n        });\n      }\n      prepareSprings(springs, props2, function (key) {\n        return createSpring(key);\n      });\n    });\n  }\n  setSprings(ctrl, springs);\n  return springs;\n}\nfunction setSprings(ctrl, springs) {\n  eachProp4(springs, function (spring, key) {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver2(spring, ctrl);\n    }\n  });\n}\nfunction createSpring(key, observer) {\n  var spring = new SpringValue();\n  spring.key = key;\n  if (observer) {\n    addFluidObserver2(spring, observer);\n  }\n  return spring;\n}\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each3(props.keys, function (key) {\n      var spring = springs[key] || (springs[key] = create(key));\n      spring[\"_prepareNode\"](props);\n    });\n  }\n}\nfunction prepareKeys(ctrl, queue) {\n  each3(queue, function (props) {\n    prepareSprings(ctrl.springs, props, function (key) {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n\n// src/SpringContext.tsx\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport { useMemoOne } from \"@react-spring/shared\";\nvar SpringContext = function SpringContext(_ref14) {\n  var children = _ref14.children,\n    props = _objectWithoutProperties(_ref14, [\"children\"]);\n  var inherited = useContext(ctx);\n  var pause = props.pause || !!inherited.pause,\n    immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(function () {\n    return {\n      pause: pause,\n      immediate: immediate\n    };\n  }, [pause, immediate]);\n  var Provider = ctx.Provider;\n  return /* @__PURE__ */React.createElement(Provider, {\n    value: props\n  }, children);\n};\nvar ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\nfunction makeContext(target, init) {\n  Object.assign(target, React.createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n}\n\n// src/SpringRef.ts\nimport { each as each4, is as is7, deprecateDirectCall } from \"@react-spring/shared\";\nvar SpringRef = function SpringRef() {\n  var current = [];\n  var SpringRef2 = function SpringRef2(props) {\n    deprecateDirectCall();\n    var results = [];\n    each4(current, function (ctrl, i) {\n      if (is7.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        var update2 = _getProps(props, ctrl, i);\n        if (update2) {\n          results.push(ctrl.start(update2));\n        }\n      }\n    });\n    return results;\n  };\n  SpringRef2.current = current;\n  SpringRef2.add = function (ctrl) {\n    if (!current.includes(ctrl)) {\n      current.push(ctrl);\n    }\n  };\n  SpringRef2.delete = function (ctrl) {\n    var i = current.indexOf(ctrl);\n    if (~i) current.splice(i, 1);\n  };\n  SpringRef2.pause = function () {\n    var _arguments = arguments;\n    each4(current, function (ctrl) {\n      return ctrl.pause.apply(ctrl, _toConsumableArray(_arguments));\n    });\n    return this;\n  };\n  SpringRef2.resume = function () {\n    var _arguments2 = arguments;\n    each4(current, function (ctrl) {\n      return ctrl.resume.apply(ctrl, _toConsumableArray(_arguments2));\n    });\n    return this;\n  };\n  SpringRef2.set = function (values) {\n    each4(current, function (ctrl, i) {\n      var update2 = is7.fun(values) ? values(i, ctrl) : values;\n      if (update2) {\n        ctrl.set(update2);\n      }\n    });\n  };\n  SpringRef2.start = function (props) {\n    var _this12 = this;\n    var results = [];\n    each4(current, function (ctrl, i) {\n      if (is7.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        var update2 = _this12._getProps(props, ctrl, i);\n        if (update2) {\n          results.push(ctrl.start(update2));\n        }\n      }\n    });\n    return results;\n  };\n  SpringRef2.stop = function () {\n    var _arguments3 = arguments;\n    each4(current, function (ctrl) {\n      return ctrl.stop.apply(ctrl, _toConsumableArray(_arguments3));\n    });\n    return this;\n  };\n  SpringRef2.update = function (props) {\n    var _this13 = this;\n    each4(current, function (ctrl, i) {\n      return ctrl.update(_this13._getProps(props, ctrl, i));\n    });\n    return this;\n  };\n  var _getProps = function _getProps(arg, ctrl, index) {\n    return is7.fun(arg) ? arg(index, ctrl) : arg;\n  };\n  SpringRef2._getProps = _getProps;\n  return SpringRef2;\n};\n\n// src/hooks/useSprings.ts\nfunction useSprings(length, props, deps) {\n  var _arguments4 = arguments;\n  var propsFn = is8.fun(props) && props;\n  if (propsFn && !deps) deps = [];\n  var ref = useMemo(function () {\n    return propsFn || _arguments4.length == 3 ? SpringRef() : void 0;\n  }, []);\n  var layoutId = useRef(0);\n  var forceUpdate = useForceUpdate();\n  var state = useMemo(function () {\n    return {\n      ctrls: [],\n      queue: [],\n      flush: function flush(ctrl, updates2) {\n        var springs2 = getSprings(ctrl, updates2);\n        var canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some(function (key) {\n          return !ctrl.springs[key];\n        });\n        return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise(function (resolve) {\n          setSprings(ctrl, springs2);\n          state.queue.push(function () {\n            resolve(flushUpdateQueue(ctrl, updates2));\n          });\n          forceUpdate();\n        });\n      }\n    };\n  }, []);\n  var ctrls = useRef(_toConsumableArray(state.ctrls));\n  var updates = [];\n  var prevLength = usePrev(length) || 0;\n  useMemo(function () {\n    each5(ctrls.current.slice(length, prevLength), function (ctrl) {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    ctrls.current.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(function () {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n  function declareUpdates(startIndex, endIndex) {\n    for (var i = startIndex; i < endIndex; i++) {\n      var ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));\n      var update2 = propsFn ? propsFn(i, ctrl) : props[i];\n      if (update2) {\n        updates[i] = declareUpdate(update2);\n      }\n    }\n  }\n  var springs = ctrls.current.map(function (ctrl, i) {\n    return getSprings(ctrl, updates[i]);\n  });\n  var context = useContext2(SpringContext);\n  var prevContext = usePrev(context);\n  var hasContext = context !== prevContext && hasProps(context);\n  useIsomorphicLayoutEffect2(function () {\n    layoutId.current++;\n    state.ctrls = ctrls.current;\n    var queue = state.queue;\n    if (queue.length) {\n      state.queue = [];\n      each5(queue, function (cb) {\n        return cb();\n      });\n    }\n    each5(ctrls.current, function (ctrl, i) {\n      ref?.add(ctrl);\n      if (hasContext) {\n        ctrl.start({\n          default: context\n        });\n      }\n      var update2 = updates[i];\n      if (update2) {\n        replaceRef(ctrl, update2.ref);\n        if (ctrl.ref) {\n          ctrl.queue.push(update2);\n        } else {\n          ctrl.start(update2);\n        }\n      }\n    });\n  });\n  useOnce(function () {\n    return function () {\n      each5(state.ctrls, function (ctrl) {\n        return ctrl.stop(true);\n      });\n    };\n  });\n  var values = springs.map(function (x) {\n    return _objectSpread({}, x);\n  });\n  return ref ? [values, ref] : values;\n}\n\n// src/hooks/useSpring.ts\nfunction useSpring(props, deps) {\n  var isFn = is9.fun(props);\n  var _useSprings = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps),\n    _useSprings2 = _slicedToArray(_useSprings, 2),\n    _useSprings2$ = _slicedToArray(_useSprings2[0], 1),\n    values = _useSprings2$[0],\n    ref = _useSprings2[1];\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n}\n\n// src/hooks/useSpringRef.ts\nimport { useState } from \"react\";\nvar initSpringRef = function initSpringRef() {\n  return SpringRef();\n};\nvar useSpringRef = function useSpringRef() {\n  return useState(initSpringRef)[0];\n};\n\n// src/hooks/useSpringValue.ts\nimport { useConstant, useOnce as useOnce2 } from \"@react-spring/shared\";\nvar useSpringValue = function useSpringValue(initial, props) {\n  var springValue = useConstant(function () {\n    return new SpringValue(initial, props);\n  });\n  useOnce2(function () {\n    return function () {\n      springValue.stop();\n    };\n  });\n  return springValue;\n};\n\n// src/hooks/useTrail.ts\nimport { each as each6, is as is10, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect3 } from \"@react-spring/shared\";\nfunction useTrail(length, propsArg, deps) {\n  var propsFn = is10.fun(propsArg) && propsArg;\n  if (propsFn && !deps) deps = [];\n  var reverse = true;\n  var passedRef = void 0;\n  var result = useSprings(length, function (i, ctrl) {\n    var props = propsFn ? propsFn(i, ctrl) : propsArg;\n    passedRef = props.ref;\n    reverse = reverse && props.reverse;\n    return props;\n  },\n  // Ensure the props function is called when no deps exist.\n  // This works around the 3 argument rule.\n  deps || [{}]);\n  useIsomorphicLayoutEffect3(function () {\n    each6(result[1].current, function (ctrl, i) {\n      var parent = result[1].current[i + (reverse ? 1 : -1)];\n      replaceRef(ctrl, passedRef);\n      if (ctrl.ref) {\n        if (parent) {\n          ctrl.update({\n            to: parent.springs\n          });\n        }\n        return;\n      }\n      if (parent) {\n        ctrl.start({\n          to: parent.springs\n        });\n      } else {\n        ctrl.start();\n      }\n    });\n  }, deps);\n  if (propsFn || arguments.length == 3) {\n    var ref = passedRef ?? result[1];\n    ref[\"_getProps\"] = function (propsArg2, ctrl, i) {\n      var props = is10.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n      if (props) {\n        var parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent) props.to = parent.springs;\n        return props;\n      }\n    };\n    return result;\n  }\n  return result[0];\n}\n\n// src/hooks/useTransition.tsx\nimport * as React2 from \"react\";\nimport { useContext as useContext3, useRef as useRef2, useMemo as useMemo2 } from \"react\";\nimport { is as is11, toArray as toArray4, useForceUpdate as useForceUpdate2, useOnce as useOnce3, usePrev as usePrev2, each as each7, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect4 } from \"@react-spring/shared\";\nfunction useTransition(data, props, deps) {\n  var _arguments5 = arguments;\n  var propsFn = is11.fun(props) && props;\n  var _ref15 = propsFn ? propsFn() : props,\n    reset = _ref15.reset,\n    sort = _ref15.sort,\n    _ref15$trail = _ref15.trail,\n    trail = _ref15$trail === void 0 ? 0 : _ref15$trail,\n    _ref15$expires = _ref15.expires,\n    expires = _ref15$expires === void 0 ? true : _ref15$expires,\n    _ref15$exitBeforeEnte = _ref15.exitBeforeEnter,\n    exitBeforeEnter = _ref15$exitBeforeEnte === void 0 ? false : _ref15$exitBeforeEnte,\n    onDestroyed = _ref15.onDestroyed,\n    propsRef = _ref15.ref,\n    propsConfig = _ref15.config;\n  var ref = useMemo2(function () {\n    return propsFn || _arguments5.length == 3 ? SpringRef() : void 0;\n  }, []);\n  var items = toArray4(data);\n  var transitions = [];\n  var usedTransitions = useRef2(null);\n  var prevTransitions = reset ? null : usedTransitions.current;\n  useIsomorphicLayoutEffect4(function () {\n    usedTransitions.current = transitions;\n  });\n  useOnce3(function () {\n    each7(transitions, function (t) {\n      ref?.add(t.ctrl);\n      t.ctrl.ref = ref;\n    });\n    return function () {\n      each7(usedTransitions.current, function (t) {\n        if (t.expired) {\n          clearTimeout(t.expirationId);\n        }\n        detachRefs(t.ctrl, ref);\n        t.ctrl.stop(true);\n      });\n    };\n  });\n  var keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);\n  var expired = reset && usedTransitions.current || [];\n  useIsomorphicLayoutEffect4(function () {\n    return each7(expired, function (_ref16) {\n      var ctrl = _ref16.ctrl,\n        item = _ref16.item,\n        key = _ref16.key;\n      detachRefs(ctrl, ref);\n      callProp(onDestroyed, item, key);\n    });\n  });\n  var reused = [];\n  if (prevTransitions) each7(prevTransitions, function (t, i) {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n      expired.push(t);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  });\n  each7(items, function (item, i) {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item: item,\n        phase: \"mount\" /* MOUNT */,\n        ctrl: new Controller()\n      };\n      transitions[i].ctrl.item = item;\n    }\n  });\n  if (reused.length) {\n    var i = -1;\n    var _ref17 = propsFn ? propsFn() : props,\n      leave = _ref17.leave;\n    each7(reused, function (keyIndex, prevIndex) {\n      var t = prevTransitions[prevIndex];\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = _objectSpread({}, t, {\n          item: items[keyIndex]\n        });\n      } else if (leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n  if (is11.fun(sort)) {\n    transitions.sort(function (a, b) {\n      return sort(a.item, b.item);\n    });\n  }\n  var delay = -trail;\n  var forceUpdate = useForceUpdate2();\n  var defaultProps = getDefaultProps(props);\n  var changes = /* @__PURE__ */new Map();\n  var exitingTransitions = useRef2( /* @__PURE__ */new Map());\n  var forceChange = useRef2(false);\n  each7(transitions, function (t, i) {\n    var key = t.key;\n    var prevPhase = t.phase;\n    var p = propsFn ? propsFn() : props;\n    var to2;\n    var phase;\n    var propsDelay = callProp(p.delay || 0, key);\n    if (prevPhase == \"mount\" /* MOUNT */) {\n      to2 = p.enter;\n      phase = \"enter\" /* ENTER */;\n    } else {\n      var isLeave = keys.indexOf(key) < 0;\n      if (prevPhase != \"leave\" /* LEAVE */) {\n        if (isLeave) {\n          to2 = p.leave;\n          phase = \"leave\" /* LEAVE */;\n        } else if (to2 = p.update) {\n          phase = \"update\" /* UPDATE */;\n        } else return;\n      } else if (!isLeave) {\n        to2 = p.enter;\n        phase = \"enter\" /* ENTER */;\n      } else return;\n    }\n    to2 = callProp(to2, t.item, i);\n    to2 = is11.obj(to2) ? inferTo(to2) : {\n      to: to2\n    };\n    if (!to2.config) {\n      var config2 = propsConfig || defaultProps.config;\n      to2.config = callProp(config2, t.item, i, phase);\n    }\n    delay += trail;\n    var payload = _objectSpread({}, defaultProps, {\n      // we need to add our props.delay value you here.\n      delay: propsDelay + delay,\n      ref: propsRef,\n      immediate: p.immediate,\n      // This prevents implied resets.\n      reset: false\n    }, to2);\n    if (phase == \"enter\" /* ENTER */ && is11.und(payload.from)) {\n      var p2 = propsFn ? propsFn() : props;\n      var from = is11.und(p2.initial) || prevTransitions ? p2.from : p2.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n    var onResolve = payload.onResolve;\n    payload.onResolve = function (result) {\n      callProp(onResolve, result);\n      var transitions2 = usedTransitions.current;\n      var t2 = transitions2.find(function (t3) {\n        return t3.key === key;\n      });\n      if (!t2) return;\n      if (result.cancelled && t2.phase != \"update\" /* UPDATE */) {\n        return;\n      }\n      if (t2.ctrl.idle) {\n        var idle = transitions2.every(function (t3) {\n          return t3.ctrl.idle;\n        });\n        if (t2.phase == \"leave\" /* LEAVE */) {\n          var expiry = callProp(expires, t2.item);\n          if (expiry !== false) {\n            var expiryMs = expiry === true ? 0 : expiry;\n            t2.expired = true;\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n        if (idle && transitions2.some(function (t3) {\n          return t3.expired;\n        })) {\n          exitingTransitions.current.delete(t2);\n          if (exitBeforeEnter) {\n            forceChange.current = true;\n          }\n          forceUpdate();\n        }\n      }\n    };\n    var springs = getSprings(t.ctrl, payload);\n    if (phase === \"leave\" /* LEAVE */ && exitBeforeEnter) {\n      exitingTransitions.current.set(t, {\n        phase: phase,\n        springs: springs,\n        payload: payload\n      });\n    } else {\n      changes.set(t, {\n        phase: phase,\n        springs: springs,\n        payload: payload\n      });\n    }\n  });\n  var context = useContext3(SpringContext);\n  var prevContext = usePrev2(context);\n  var hasContext = context !== prevContext && hasProps(context);\n  useIsomorphicLayoutEffect4(function () {\n    if (hasContext) {\n      each7(transitions, function (t) {\n        t.ctrl.start({\n          default: context\n        });\n      });\n    }\n  }, [context]);\n  each7(changes, function (_, t) {\n    if (exitingTransitions.current.size) {\n      var ind = transitions.findIndex(function (state) {\n        return state.key === t.key;\n      });\n      transitions.splice(ind, 1);\n    }\n  });\n  useIsomorphicLayoutEffect4(function () {\n    each7(exitingTransitions.current.size ? exitingTransitions.current : changes, function (_ref18, t) {\n      var phase = _ref18.phase,\n        payload = _ref18.payload;\n      var ctrl = t.ctrl;\n      t.phase = phase;\n      ref?.add(ctrl);\n      if (hasContext && phase == \"enter\" /* ENTER */) {\n        ctrl.start({\n          default: context\n        });\n      }\n      if (payload) {\n        replaceRef(ctrl, payload.ref);\n        if ((ctrl.ref || ref) && !forceChange.current) {\n          ctrl.update(payload);\n        } else {\n          ctrl.start(payload);\n          if (forceChange.current) {\n            forceChange.current = false;\n          }\n        }\n      }\n    });\n  }, reset ? void 0 : deps);\n  var renderTransitions = function renderTransitions(render) {\n    return /* @__PURE__ */React2.createElement(React2.Fragment, null, transitions.map(function (t, i) {\n      var _ref19 = changes.get(t) || t.ctrl,\n        springs = _ref19.springs;\n      var elem = render(_objectSpread({}, springs), t.item, t, i);\n      return elem && elem.type ? /* @__PURE__ */React2.createElement(elem.type, _objectSpread({}, elem.props, {\n        key: is11.str(t.key) || is11.num(t.key) ? t.key : t.ctrl.id,\n        ref: elem.ref\n      })) : elem;\n    }));\n  };\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\nvar nextKey = 1;\nfunction getKeys(items, _ref20, prevTransitions) {\n  var key = _ref20.key,\n    _ref20$keys = _ref20.keys,\n    keys = _ref20$keys === void 0 ? key : _ref20$keys;\n  if (keys === null) {\n    var reused = /* @__PURE__ */new Set();\n    return items.map(function (item) {\n      var t = prevTransitions && prevTransitions.find(function (t2) {\n        return t2.item === item && t2.phase !== \"leave\" /* LEAVE */ && !reused.has(t2);\n      });\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n      return nextKey++;\n    });\n  }\n  return is11.und(keys) ? items : is11.fun(keys) ? items.map(keys) : toArray4(keys);\n}\n\n// src/hooks/useScroll.ts\nimport { each as each8, onScroll, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect5 } from \"@react-spring/shared\";\nvar useScroll = function useScroll() {\n  var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    container = _ref21.container,\n    springOptions = _objectWithoutProperties(_ref21, [\"container\"]);\n  var _useSpring = useSpring(function () {\n      return _objectSpread({\n        scrollX: 0,\n        scrollY: 0,\n        scrollXProgress: 0,\n        scrollYProgress: 0\n      }, springOptions);\n    }, []),\n    _useSpring2 = _slicedToArray(_useSpring, 2),\n    scrollValues = _useSpring2[0],\n    api = _useSpring2[1];\n  useIsomorphicLayoutEffect5(function () {\n    var cleanupScroll = onScroll(function (_ref22) {\n      var x = _ref22.x,\n        y = _ref22.y;\n      api.start({\n        scrollX: x.current,\n        scrollXProgress: x.progress,\n        scrollY: y.current,\n        scrollYProgress: y.progress\n      });\n    }, {\n      container: container?.current || void 0\n    });\n    return function () {\n      each8(Object.values(scrollValues), function (value) {\n        return value.stop();\n      });\n      cleanupScroll();\n    };\n  }, []);\n  return scrollValues;\n};\n\n// src/hooks/useResize.ts\nimport { onResize, each as each9, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect6 } from \"@react-spring/shared\";\nvar useResize = function useResize(_ref23) {\n  var container = _ref23.container,\n    springOptions = _objectWithoutProperties(_ref23, [\"container\"]);\n  var _useSpring3 = useSpring(function () {\n      return _objectSpread({\n        width: 0,\n        height: 0\n      }, springOptions);\n    }, []),\n    _useSpring4 = _slicedToArray(_useSpring3, 2),\n    sizeValues = _useSpring4[0],\n    api = _useSpring4[1];\n  useIsomorphicLayoutEffect6(function () {\n    var cleanupScroll = onResize(function (_ref24) {\n      var width = _ref24.width,\n        height = _ref24.height;\n      api.start({\n        width: width,\n        height: height,\n        immediate: sizeValues.width.get() === 0 || sizeValues.height.get() === 0\n      });\n    }, {\n      container: container?.current || void 0\n    });\n    return function () {\n      each9(Object.values(sizeValues), function (value) {\n        return value.stop();\n      });\n      cleanupScroll();\n    };\n  }, []);\n  return sizeValues;\n};\n\n// src/hooks/useInView.ts\nimport { useRef as useRef3, useState as useState2 } from \"react\";\nimport { is as is12, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect7 } from \"@react-spring/shared\";\nvar defaultThresholdOptions = {\n  any: 0,\n  all: 1\n};\nfunction useInView(props, args) {\n  var _useState = useState2(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isInView = _useState2[0],\n    setIsInView = _useState2[1];\n  var ref = useRef3();\n  var propsFn = is12.fun(props) && props;\n  var springsProps = propsFn ? propsFn() : {};\n  var _springsProps$to = springsProps.to,\n    to2 = _springsProps$to === void 0 ? {} : _springsProps$to,\n    _springsProps$from = springsProps.from,\n    from = _springsProps$from === void 0 ? {} : _springsProps$from,\n    restSpringProps = _objectWithoutProperties(springsProps, [\"to\", \"from\"]);\n  var intersectionArguments = propsFn ? args : props;\n  var _useSpring5 = useSpring(function () {\n      return _objectSpread({\n        from: from\n      }, restSpringProps);\n    }, []),\n    _useSpring6 = _slicedToArray(_useSpring5, 2),\n    springs = _useSpring6[0],\n    api = _useSpring6[1];\n  useIsomorphicLayoutEffect7(function () {\n    var element = ref.current;\n    var _ref25 = intersectionArguments ?? {},\n      root = _ref25.root,\n      once = _ref25.once,\n      _ref25$amount = _ref25.amount,\n      amount = _ref25$amount === void 0 ? \"any\" : _ref25$amount,\n      restArgs = _objectWithoutProperties(_ref25, [\"root\", \"once\", \"amount\"]);\n    if (!element || once && isInView || typeof IntersectionObserver === \"undefined\") return;\n    var activeIntersections = /* @__PURE__ */new WeakMap();\n    var onEnter = function onEnter() {\n      if (to2) {\n        api.start(to2);\n      }\n      setIsInView(true);\n      var cleanup = function cleanup() {\n        if (from) {\n          api.start(from);\n        }\n        setIsInView(false);\n      };\n      return once ? void 0 : cleanup;\n    };\n    var handleIntersection = function handleIntersection(entries) {\n      entries.forEach(function (entry) {\n        var onLeave = activeIntersections.get(entry.target);\n        if (entry.isIntersecting === Boolean(onLeave)) {\n          return;\n        }\n        if (entry.isIntersecting) {\n          var newOnLeave = onEnter();\n          if (is12.fun(newOnLeave)) {\n            activeIntersections.set(entry.target, newOnLeave);\n          } else {\n            observer.unobserve(entry.target);\n          }\n        } else if (onLeave) {\n          onLeave();\n          activeIntersections.delete(entry.target);\n        }\n      });\n    };\n    var observer = new IntersectionObserver(handleIntersection, _objectSpread({\n      root: root && root.current || void 0,\n      threshold: typeof amount === \"number\" || Array.isArray(amount) ? amount : defaultThresholdOptions[amount]\n    }, restArgs));\n    observer.observe(element);\n    return function () {\n      return observer.unobserve(element);\n    };\n  }, [intersectionArguments]);\n  if (propsFn) {\n    return [ref, springs];\n  }\n  return [ref, isInView];\n}\n\n// src/components/Spring.tsx\nfunction Spring(_ref26) {\n  var children = _ref26.children,\n    props = _objectWithoutProperties(_ref26, [\"children\"]);\n  return children(useSpring(props));\n}\n\n// src/components/Trail.tsx\nimport { is as is13 } from \"@react-spring/shared\";\nfunction Trail(_ref27) {\n  var items = _ref27.items,\n    children = _ref27.children,\n    props = _objectWithoutProperties(_ref27, [\"items\", \"children\"]);\n  var trails = useTrail(items.length, props);\n  return items.map(function (item, index) {\n    var result = children(item, index);\n    return is13.fun(result) ? result(trails[index]) : result;\n  });\n}\n\n// src/components/Transition.tsx\nfunction Transition(_ref28) {\n  var items = _ref28.items,\n    children = _ref28.children,\n    props = _objectWithoutProperties(_ref28, [\"items\", \"children\"]);\n  return useTransition(items, props)(children);\n}\n\n// src/interpolate.ts\nimport { deprecateInterpolate as deprecateInterpolate2 } from \"@react-spring/shared\";\n\n// src/Interpolation.ts\nimport { is as is14, raf as raf5, each as each10, isEqual as isEqual2, toArray as toArray5, frameLoop as frameLoop3, getFluidValue as getFluidValue3, createInterpolator, Globals as G6, callFluidObservers as callFluidObservers3, addFluidObserver as addFluidObserver3, removeFluidObserver as removeFluidObserver2, hasFluidValue as hasFluidValue2 } from \"@react-spring/shared\";\nimport { getAnimated as getAnimated3, setAnimated as setAnimated2, getAnimatedType as getAnimatedType2, getPayload as getPayload2 } from \"@react-spring/animated\";\nvar Interpolation = /*#__PURE__*/function (_FrameValue2) {\n  _inherits(Interpolation, _FrameValue2);\n  function Interpolation(source, args) {\n    var _this14;\n    _classCallCheck(this, Interpolation);\n    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(Interpolation).call(this));\n    _this14.source = source;\n    /** Equals false when in the frameloop */\n    _this14.idle = true;\n    /** The inputs which are currently animating */\n    _this14._active = /* @__PURE__ */new Set();\n    _this14.calc = createInterpolator.apply(void 0, _toConsumableArray(args));\n    var value = _this14._get();\n    var nodeType = getAnimatedType2(value);\n    setAnimated2(_assertThisInitialized(_assertThisInitialized(_this14)), nodeType.create(value));\n    return _this14;\n  }\n  _createClass(Interpolation, [{\n    key: \"advance\",\n    value: function advance(_dt) {\n      var value = this._get();\n      var oldValue = this.get();\n      if (!isEqual2(value, oldValue)) {\n        getAnimated3(this).setValue(value);\n        this._onChange(value, this.idle);\n      }\n      if (!this.idle && checkIdle(this._active)) {\n        becomeIdle(this);\n      }\n    }\n  }, {\n    key: \"_get\",\n    value: function _get() {\n      var inputs = is14.arr(this.source) ? this.source.map(getFluidValue3) : toArray5(getFluidValue3(this.source));\n      return this.calc.apply(this, _toConsumableArray(inputs));\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      var _this15 = this;\n      if (this.idle && !checkIdle(this._active)) {\n        this.idle = false;\n        each10(getPayload2(this), function (node) {\n          node.done = false;\n        });\n        if (G6.skipAnimation) {\n          raf5.batchedUpdates(function () {\n            return _this15.advance();\n          });\n          becomeIdle(this);\n        } else {\n          frameLoop3.start(this);\n        }\n      }\n    } // Observe our sources only when we're observed.\n  }, {\n    key: \"_attach\",\n    value: function _attach() {\n      var _this16 = this;\n      var priority = 1;\n      each10(toArray5(this.source), function (source) {\n        if (hasFluidValue2(source)) {\n          addFluidObserver3(source, _this16);\n        }\n        if (isFrameValue(source)) {\n          if (!source.idle) {\n            _this16._active.add(source);\n          }\n          priority = Math.max(priority, source.priority + 1);\n        }\n      });\n      this.priority = priority;\n      this._start();\n    } // Stop observing our sources once we have no observers.\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      var _this17 = this;\n      each10(toArray5(this.source), function (source) {\n        if (hasFluidValue2(source)) {\n          removeFluidObserver2(source, _this17);\n        }\n      });\n      this._active.clear();\n      becomeIdle(this);\n    } /** @internal */\n  }, {\n    key: \"eventObserved\",\n    value: function eventObserved(event) {\n      if (event.type == \"change\") {\n        if (event.idle) {\n          this.advance();\n        } else {\n          this._active.add(event.parent);\n          this._start();\n        }\n      } else if (event.type == \"idle\") {\n        this._active.delete(event.parent);\n      } else if (event.type == \"priority\") {\n        this.priority = toArray5(this.source).reduce(function (highest, parent) {\n          return Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1);\n        }, 0);\n      }\n    }\n  }]);\n  return Interpolation;\n}(FrameValue);\nfunction isIdle(source) {\n  return source.idle !== false;\n}\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each10(getPayload2(self), function (node) {\n      node.done = true;\n    });\n    callFluidObservers3(self, {\n      type: \"idle\",\n      parent: self\n    });\n  }\n}\n\n// src/interpolate.ts\nvar to = function to(source) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n  return new Interpolation(source, args);\n};\nvar interpolate = function interpolate(source) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n  return deprecateInterpolate2(), new Interpolation(source, args);\n};\n\n// src/globals.ts\nimport { Globals, frameLoop as frameLoop4, createStringInterpolator } from \"@react-spring/shared\";\nGlobals.assign({\n  createStringInterpolator: createStringInterpolator,\n  to: function to(source, args) {\n    return new Interpolation(source, args);\n  }\n});\nvar update = frameLoop4.advance;\n\n// src/index.ts\nimport { createInterpolator as createInterpolator2, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect8, useReducedMotion, easings as easings2 } from \"@react-spring/shared\";\nexport * from \"@react-spring/types\";\nexport { BailSignal, Controller, FrameValue, Globals, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, createInterpolator2 as createInterpolator, easings2 as easings, inferTo, interpolate, to, update, useChain, useInView, useIsomorphicLayoutEffect8 as useIsomorphicLayoutEffect, useReducedMotion, useResize, useScroll, useSpring, useSpringRef, useSpringValue, useSprings, useTrail, useTransition };","map":null,"metadata":{},"sourceType":"module"}